Preparation de l'environnement
    Installation
        npm install @angular/cli

    Creation
        npm new mon-app

    Lancement
        ng serve

    Installation de bootstrap
        npm install bootstrap --save

    Importer dans /style.css
        @import '~bootstrap/dist/css/bootstrap.min.css' ;

    Installation de icons
       npm i material-icons --save

    Importer dans /style.css
        @import '~material-icons/iconfont/material-icons.css'
    
    
    Creation de composant 
        dossier parent dans /src/app qui contient (list.component.ts et list.component.html)
            le .html contient le code html
            le .ts aura les declarations suivantes

                import { Component } from "@angular/core";
                @Component({
                    selector: 'Malist',
                    templateUrl: './hotel-list.component.html'
                })
                export class HotelListComponent {
                    public title : string = 'Ma list' ;
                }
        Pour que cela fonctionne il faut deux choses :
            * Declarer le component au niveau de App.module
            * utiliser le selecteur pour afficher le code html
                <Malist></Malist>

            Les directives 
            Considerons un list hotels declarée dans le .ts
                * ngif
                    
                    <h1 *ngIf="hotels && hotels.length"> {{title}} </h1>
                        Si la liste a au moins une instance, le titre sera affiché

                * ngFor

                    <div class="col mb-4" *ngFor="let hotel of hotels">
                        <div class="card">
                        <img class="card-img-top" src="{{hotel.imageUrl}}" alt="Card image cap">
                        <div class="card-body">
                            <h5 class="card-title">{{hotel.hotelName}}</h5>
                            <p class="card-text">{{hotel.description}}</p>
                        </div>
                        <div class="card-footer">
                            <small class="text-muted">Last updated 3 mins ago</small>
                        </div>
                    </div>
                Property et event binding (one way binding)
            
    Les pipes
        Permettent de transformer les valeurs avant de les afficher
            * date: tranforme une valeur de date en un autre format
            * currency: unité de monnaie
            * uppercase: 
            * lowercase: 
            * percent: 
            * decimal: 
            * json: format json
            * slice, async: 
            Exemple:
                {{ price | currency | lowercase }}

    On peut creer les pipes :
        On cree alors un fichier .ts et ensuite il faudra:
                * Definir le component @Pipe({ ... })
                * implementer l'interface PipeTransform
                * Definir le corps de la methode
                * Declarer le pipe au niveau du app.module
            Exemple


        Cycle de vie (hook)
            angular propose differents interfaces pour pouvoir gerer
             un cycle de vie d'un composant en partant de :
                * Creation du composant
                    - ngOnInit() : initialise le composant
                    - ngOnChange() : Appelée s'il y'a le property binding

                * Rendu de la page
                    - ngAfterContentInit()
                    - ngAfterContentChecked()

                * Rendu des sous composants enfants
                    - ngAfterViewInit()
                    - ngAfterViewChecked()

                * Changement
                    - ngOnChange()
                    - ngDoCheck()

                * Destruction : pour quitter la page ou le composant
                    - ngOnDestroy() : Detruit le composant

            Pour pouvoir utiliser un niveau de vie d'un composant, 
            il faudra alors:
                * Importer le niveau de vie (import {OnIni} ...)
                * l'implementer (implements OnInit)
                * Definir le corps de la methode

        Les getteurs et setteurs
            Exemple :
                private _hotelName = 'Marakech' ;

                // Getteur 
                get hotelName(): string {
                    return this._hotelName;
                }

                // Setteur 
                set hotelName(hotelName: string) {
                     this._hotelName = hotelName
                }

        COMPOSANTS Parent-enfants
            Il est necessaire d'utiliser un composant dans un composant
            Si un composant B est utilisé dans un composant A, toutes les
            fonctionnalités du composant B pourront etre interpreter et afficher par
            par le composant A 

            Pour la communication, angular a crée cet interface.
            Le parent peut envoyer des données a l'enfant travers la fonction @input.
            Le contraire par @output

            communication de Parent à enfant

                // Code html parent
                    <div>
                        <enf [note]="eleve.note">

                        </enf>
                    </div>
                // Fin Code parent
                Pour que la note soit visible au niveau du component enfant, il faut:
                    le decorer avec un @input()
                        @Input()
                        public note: number;

            communication de Enfant au Parent
                Pour le composant enfant
                    * Identifier l'element declacheur de l'evenement
                        <div (click)="sendMessage()">

                        </div>

                    * Declarer un evenement qui se charge d'envoyer le message au parent
                        @output
                        public sendMessageClicked(): EventEmitter<string> = new EventEmitter<string>();

                    * Definir la methode sendMessage au niveau du .ts pour passer le message a l'evenement

                        public sendMessage(): string { 
                            this.sendMessageClicked.emit('Bonjour à tous');
                        }
                Pour le composant parent
                    * Le parent doit ecouter le message envoyé dans le composant enfant
                        <enf (sendMessageClicked)="receiveMessageClicked($event)">

                        </enf>

                    * Definir la methode receiveMessageClicked($event) au niveau du .ts pour passer le message a l'evenement

                        public receiveMessage: string ;

                        public receiveMessageClicked(message: string): void { 
                            this.receiveMessage = message ;
                        }

        Les services
            C'est une classe qui permet d'interagir avec des sources de donnees externes (bdd, serveur,...)
            Permet de partager des donnees avec plusieurs composants independants
            
            Creation de service 
                * Creer un fichier .ts
                * Ajouter le decorateur @injectable() dans angular/core
                * exporter le service

            Injection du service dans un composant
                * Creer une variable de type private
                * declarer un constructeur en passant une variable de type du service
                * Attribuer la valeur du service à la varible créee
                    Exemple 
                        private _hotelService;
                        constructor(hotelService: HotelServce) {
                            this._hotelService = hotelService
                        }
                    Mais on peut resume ca en une seule ligne
                        contructor(private hotelService: HotelService){
                            
                        }

                Les paquets Http, Router, Forms
                    Le paquet Http angular fournit des methodes et des fonctions qui permetttent
                    d'envoyer et de recevoir de données à un service.
                    Il permet aussi de recommencer une requetes si celle-ci a échoué
                    
                    Les Observables : 
                        Permettent de manager les elements de maniere asynchrone. Ils traitent elements
                        sous forme de array ou en tant que connection en fonction du temps.
                        Les Observables peuvent faire une operation de transformation
                        des données dés leur arrivées en utilisant:
                            * map(), filter(), find(), concat(), take(), ...
                            Pour utiliser ces operatuers, on se servira de la methode .pipe()
                            Exemple d'utilisation
                                import {Observable, range} from 'rxjs',
                                import {map, filter} from 'rxjs/operators',

                                const sources$: Observable<number> = range(0,10);
                                sources$.pipe(
                                    map(nombre => nombre * 3),
                                    filter(x => x % 2 === 0)
                                ).subscribe(y => console.log(y))

                                Resultat : 0, 6, 12, 18, 24 ;

                    HttpClient     
                        Pour recevoir les données dans notre application angular, nous avons 
                        besoin d'un angular qui est le HttpClient.
                        La requete sera envoyer a travers de ce service angular et la reponses
                        va etre recuperer par c meme service transformer en Observable et 
                        puis retourner a notre service
                        Pour envoyer une requete a partir de notre service angular, il faut:
                            * definir l'url ou la source de donnees
                                private readonly HOTEL_API_URL = 'api/hotels.json';
                            * Injecter le service HttpClient
                                constructor(private http: HttpClient) { }
                            * envoyer la requete
                                public getHotels(): Observable<IHotel> {
                                    this.http.get<IHotel[]>(this.HOTEL_API_URL);
                                }
                            * Importer HttpClient dans app.module (imports)

                        Interception des erreurs et problemes qui peuvent survenir
                            public getHotels(): Observable<IHotel[]>
                            {
                                return this.http.get<IHotel[]>(this.HOTEL_API_URL).pipe(
                                        // permet de verifier dans le console si les donnees recues
                                    tap(hotels => console.log('Hotels: ', hotels)),
                                        // S'il probleme on execute cette methode pour Intercepter les erreurs
                                    catchError(this.handleError)
                                );
                                // Source 
                                    http://angular.io/guide/http#getting-error-details
                            }

                            private handleError(err: HttpErrorResponse){ ... }

                    Pour la requete puis etre envoyer, il faut appeller la methode subscribe() 
                    au niveau du composant. Ce composant s'engage à recevoir toutes les donnees 
                    subscribe() prend en parametre un objet observer qui compose plusieurs fonctions
                        * nextFn: De recevoir l'objet qui a été emit 
                        * errorFn: retourner chaque fois que l'erreur va etre rejeter à partir de l'observable
                        * completeFn: Elle s'execute a chaque fois que le dernier element est retourner
                            ou a chaque fois qu'il n'y a plus d'element à retourner
                    unsubscribe() permet de se desabonner à la reception de données

                    Promise vs Observable
                        Les Promise utilisent .then() ou .catch() pour d'obtenir ou non des resultats 
                        difference entre Promise et Observable
                            * promise :
                                * Une seule valeur en retour
                                * ni modifiable, ni annulable
                            * Observable :
                                * Plusieurs valeurs en retour avec le temps
                                * Modifiable, Annulable
                                * operatuers connus, operateurs supplementaires

                    Le routage
                        On aura besoin de deux autres composants
                            * ng g c Home 
                            * ng g c hotel-list/hotel-detail

                        Le routerOutlet:
                            Permet d'ecouter les changements que vont etre 
                            effectuer par l'user et charger à travers ng-component le contenu du composant en 
                            fonction de la requete

                            Creation de route:
                                * Configurer chaque route pour chaque composant
                                * Definir une action pour que cette route s'afficher
                                * Atacher un itinerzire à chaque action
                                * activer la route en fonction de l'action

                                Pour utiliser le routage, il nous faut le service angular pour le gerer
                                    RouterModule.forRoot([]) dans @angular/router (import)

                            Recuperqtion de valeur passer dans une route    
                                * Definir ActiveRoute dans le contructeur avec Injection
                                    contructor(private route: ActivatedRoute){ }
                                * recuperer la valeur dans le ngOnInit()
                                    ngOnInit(): void {
                                        const id = +this.route.snapshot.paramMap.get('id)
                                    }

                Structuration en module
                    Creation de module local (pour les villes)
                        ng g m components/doc/ville/ville --flat -m app

                            --flat: empecher de regrouper le module dans un sous dossier
                            -m: importer dans app.module
                            components/doc/ville/ : chemin du module
                            ville: nom du module (ville.module.ts sera le nom par convention)

                        Personnaliser le module local (declrations, import,...)

                        Creation d'un module qui permet de centraliser les quelques importations

                            ng g m shared/shared --flatt -m components/doc/ville/ville.module

                        Creation du module local pour les routes
                            ng g m components/doc/ville/ville-routing --flat -m components/doc/ville/ville.module

                        Creation d'un module qui permet de centraliser les routes (home, ...)
                            ng g m app-routing --flat -m app.module